version: '3.8'

services:
  data-generator:
    image: python:3.9-slim
    container_name: data-generator
    volumes:
      - ./data-generator:/app
    working_dir: /app
    command: bash -c "pip install -r requirements.txt && python generator.py"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    networks:
      - app-network

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "/opt/bitnami/zookeeper/bin/zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "bash", "-c", "ps aux | grep -q '[k]afka.Kafka'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  spark-master:
    image: bitnami/spark:3.4.3
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    depends_on:
      - data-generator
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - app-network

  spark-worker:
    image: bitnami/spark:3.4.3
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_WEBUI_PORT=8081
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    networks:
      - app-network

  spark-app:
    image: bitnami/spark:3.4.3
    container_name: spark-app
    environment:
      - SPARK_MODE=client
    depends_on:
      - spark-master
      - spark-worker
    volumes:
      - ./spark-app:/app
    command: /opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.4.1,org.elasticsearch:elasticsearch-spark-30_2.12:8.6.1 /app/app.py
    ports:
      - "4040:4040"
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
